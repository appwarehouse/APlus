// <auto-generated />
using System;
using APlus.DataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APlus.DataAccess.Migrations
{
    [DbContext(typeof(PatientContext))]
    partial class PatientContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("APlus.DataAccess.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppointmentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AttendanceNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CycleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ProgrammeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("SessionNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CycleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AppointmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Billable")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanBook")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludeInAnalytics")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Notes")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AppointmentStatus");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "RoleNameIndex")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex1");

                    b.ToTable("AspNetRole");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex1");

                    b.ToTable("AspNetUser");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserClaim");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId")
                        .HasDatabaseName("IX_UserId1");

                    b.ToTable("AspNetUserLogin");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId")
                        .HasDatabaseName("IX_UserId2");

                    b.ToTable("AspNetUserRole");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AuditAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("AppointmentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("AttendanceNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CycleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ProgrammeId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Audit_Appointment");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AuditTherapistAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.Property<int>("TherapistAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<string>("TherapistName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Audit_TherapistAppointment");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.BlockedPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("BlockedById")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("BlockedByName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BlockedComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlockedReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateBlocked")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUnblocked")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForUnblock")
                        .HasColumnType("text");

                    b.Property<string>("UnblockedById")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UnblockedByName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("BlockedPatients");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.BranchTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Interim")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<bool?>("MedicalAid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("NewPatients")
                        .HasColumnType("int");

                    b.Property<int>("Outcomes")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BranchTargets");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Colour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Colour1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Colour")
                        .IsFixedLength(true);

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Colour");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Cycle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CycleNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cycle");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InnerException")
                        .HasColumnType("text");

                    b.Property<string>("InnerExceptionMessage")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.GlobalSetting", b =>
                {
                    b.Property<int>("DefaultAdminAccountId")
                        .HasColumnType("int")
                        .HasColumnName("DefaultAdminAccountID");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MailPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MailServer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MailUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("GlobalSetting");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.IncomingMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<bool>("MessageRead")
                        .HasColumnType("bit");

                    b.Property<string>("NumFrom")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReplyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("SentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SentMessage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IncomingMessage");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Leads", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressUrl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AddressURL");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Colour")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasDefaultValueSql("(N'#14B7C3')")
                        .IsFixedLength(true);

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.LocationProgramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAddedToProgramme")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("LocationProgramme");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.MedediPatientImportsDiscard", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Account Name");

                    b.Property<string>("Branch")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Cell")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Date of Birth");

                    b.Property<string>("DepNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Dep No");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fax")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("First Name");

                    b.Property<string>("Gender")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HomeTel")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Home Tel");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ID Number");

                    b.Property<string>("Initials")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IsDbc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("IsDBC");

                    b.Property<string>("MedediAccountNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Mededi Account No");

                    b.Property<string>("MembershipNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Membership No");

                    b.Property<string>("Option")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PatientKey")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Patient Key");

                    b.Property<string>("Plan")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalAddr1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Postal Addr 1");

                    b.Property<string>("PostalAddr2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Postal Addr 2");

                    b.Property<string>("PostalCity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Postal City");

                    b.Property<string>("PostalPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Postal Postal Code");

                    b.Property<string>("ResCity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Res City");

                    b.Property<string>("ResStreet1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Res Street 1");

                    b.Property<string>("ResStreet2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Res Street 2");

                    b.Property<string>("Scheme")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WorkTel")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Work Tel");

                    b.ToTable("MEDediPatientImports_discard");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.MededipatientsImport", b =>
                {
                    b.Property<string>("AddressStreet1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressStreet2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Area")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BeneficiaryNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Beneficiary Number ");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Created By");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Dob")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DOB");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email Address");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HomeTel")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.Property<string>("IdNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ID Number");

                    b.Property<string>("IsDbc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("isDBC");

                    b.Property<string>("LocationId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Location Id");

                    b.Property<string>("MedEdiaccount")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("MedEDIAccount");

                    b.Property<string>("MedEdipatientKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MedEDIPatientKey");

                    b.Property<string>("MedicalAidId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Medical Aid Id");

                    b.Property<string>("MedicalAidOption")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalAidPlan")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalScheme")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Medical Scheme ");

                    b.Property<string>("Member")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Member ");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Modified By");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PostalAddress1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalAddress2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("PostalPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("WorkTel")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.ToTable("MEDEDIPatientsImport");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.MedicalAidProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isCash")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1000))");

                    b.HasKey("Id");

                    b.ToTable("MedicalAidProvider");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Otp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Credits")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<long?>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.OutgoingMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Credits")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<long?>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Patientid")
                        .HasColumnType("int");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<string>("SentByUserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Patientid");

                    b.ToTable("OutgoingMessage");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DependentNumber")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Idnumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IDNumber");

                    b.Property<string>("IntDialingCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((27))");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDbc")
                        .HasColumnType("bit")
                        .HasColumnName("IsDBC");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("MedEdiaccount")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("MedEDIAccount");

                    b.Property<string>("MedEdimedicalAidName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("MedEDIMedicalAidName");

                    b.Property<int?>("MedicalAidId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAidNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MedicalAidOptionName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MedicalAidPlanName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhysicalAddress1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhysicalAddress2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhysicalCity")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhysicalPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("PostalAddress1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalAddress2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalPostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("MedicalAidId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.PatientNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotes");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.PatientProgramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("PatientProgramme");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.PatientsImport", b =>
                {
                    b.Property<string>("AddressStreet1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressStreet2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BeneficiaryNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Beneficiary Number ");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Created By");

                    b.Property<string>("Dob")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DOB");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email Address");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HomeTel")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ID Number");

                    b.Property<string>("IsDbc")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("isDBC");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("Location Id");

                    b.Property<string>("MedEdiaccount")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MedEDIAccount");

                    b.Property<string>("MedicalAidId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Medical Aid Id");

                    b.Property<string>("MedicalAidOption")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MedicalAidPlan")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MedicalScheme")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Medical Scheme ");

                    b.Property<string>("Member")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Member ");

                    b.Property<string>("Mobile")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Modified By");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostalAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("WorkTel")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("PatientsImport");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.ProcedureCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcedureCode1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("ProcedureCode")
                        .IsFixedLength(true);

                    b.Property<int>("TherapistType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TherapistType");

                    b.ToTable("ProcedureCode");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Profile1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Profile");

                    b.HasKey("Id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.ProfileRole", b =>
                {
                    b.Property<int>("Profile")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Profile", "Role");

                    b.ToTable("ProfileRoles");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Programme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ProgrammeName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Programme");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.QuartzJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Duration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("text");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RunEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RunStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("QuartzJobs");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Ranking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RankingName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Ranking");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Day")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Holiday")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Sched_Holiday");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("LastMobifiedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("MeetingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.ToTable("Sched_Meeting");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedMeetingInvitee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("Sched_MeetingInvitees");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedTherapistAvailabilitySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime");

                    b.Property<string>("LastMobifiedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Sched_TherapistAvailabilitySchedule");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedTherapistBreak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BreakEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BreakStart")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TherapistId");

                    b.ToTable("Sched_TherapistBreaks");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedTherapistLunchBreak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("LunchTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TherapistId");

                    b.ToTable("Sched_TherapistLunchBreaks");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedTherapistLunchBreakException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ExceptionLunchTime")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength(true);

                    b.Property<string>("LastMobifiedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LunchBreak")
                        .HasColumnType("datetime");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TherapistId");

                    b.ToTable("Sched_TherapistLunchBreakExceptions");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("int");

                    b.Property<int>("SessionNumber")
                        .HasColumnType("int");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TemplateTag", b =>
                {
                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdField")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QueryStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Tag");

                    b.ToTable("TemplateTag");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Therapist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("HpcsaExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("hpcsaExpiryDate");

                    b.Property<string>("HpcsaNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("hpcsaNumber");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LunchTime")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("LunchTimeDuration")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("PracticeExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("practiceExpiryDate");

                    b.Property<string>("PracticeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("practiceNumber");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TherapistTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("TherapistTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Email" }, "UI_Email")
                        .IsUnique();

                    b.ToTable("Therapist");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Start")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TherapistId");

                    b.ToTable("TherapistAppointment");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistAppointmentNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TherapistAppointmentId")
                        .HasColumnType("int")
                        .HasComment("BookingNote or MedicalNote etc");

                    b.HasKey("Id");

                    b.HasIndex("TherapistAppointmentId");

                    b.ToTable("TherapistAppointmentNote");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistAppointmentProcedureCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProcedureCodeId")
                        .HasColumnType("int");

                    b.Property<int>("TherapistAppointmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureCodeId");

                    b.HasIndex("TherapistAppointmentId");

                    b.ToTable("TherapistAppointmentProcedureCode");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistLocation", b =>
                {
                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("TherapistId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("TherapistLocation");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsPortalVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxConcurrantAppointments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("TherapistTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TherapistType");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistTypeProgramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("int");

                    b.Property<int>("TherapistTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TherapistTypeProgramme");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.VwBioAppointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Therapist")
                        .IsRequired()
                        .HasMaxLength(301)
                        .HasColumnType("nvarchar(301)");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.ToView("vwBioAppointments");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.VwBlockedPatient", b =>
                {
                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BlockedById")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("BlockedByName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BlockedComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlockedReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateBlocked")
                        .HasColumnType("datetime");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("vwBlockedPatients");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.VwDocAppointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Therapist")
                        .IsRequired()
                        .HasMaxLength(301)
                        .HasColumnType("nvarchar(301)");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.ToView("vwDocAppointments");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.VwPhysioAppointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Therapist")
                        .IsRequired()
                        .HasMaxLength(301)
                        .HasColumnType("nvarchar(301)");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int");

                    b.ToView("vwPhysioAppointments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Appointment", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Cycle", "Cycle")
                        .WithMany("Appointments")
                        .HasForeignKey("CycleId")
                        .HasConstraintName("FK_Appointment_Cycle1");

                    b.HasOne("APlus.DataAccess.Models.Location", "Location")
                        .WithMany("Appointments")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Appointment_Location")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Appointment_AppointmentStatus")
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("Location");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetUserRole", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Authentication.ApplicationUser", b =>
                {
                    b.OwnsMany("APlus.DataAccess.Models.Authentication.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.BlockedPatient", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Patient", "Patient")
                        .WithMany("BlockedPatients")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_BlockedPatients_Patient")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.LocationProgramme", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Location", "Location")
                        .WithMany("LocationProgrammes")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_LocationProgramme_Location")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Programme", "Programme")
                        .WithMany("LocationProgrammes")
                        .HasForeignKey("ProgrammeId")
                        .HasConstraintName("FK_LocationProgramme_Programme")
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.OutgoingMessage", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Patient", "Patient")
                        .WithMany("OutgoingMessages")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_OutgoingMessage_Patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Patient", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.AspNetUser", "CreatedByNavigation")
                        .WithMany("Patients")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Patient_User_CreatedBy")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Location", "Location")
                        .WithMany("Patients")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Patient_Location")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.MedicalAidProvider", "MedicalAid")
                        .WithMany("Patients")
                        .HasForeignKey("MedicalAidId")
                        .HasConstraintName("FK_Patient_MedicalAidProvider");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Location");

                    b.Navigation("MedicalAid");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.PatientNote", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.AspNetUser", "CreatedByNavigation")
                        .WithMany("PatientNotes")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_PatientNotes_AspNetUsers")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Patient", "Patient")
                        .WithMany("PatientNotes")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientNotes_Patient")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.PatientProgramme", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Patient", "Patient")
                        .WithMany("PatientProgrammes")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientProgramme_Patient")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Programme", "Programme")
                        .WithMany("PatientProgrammes")
                        .HasForeignKey("ProgrammeId")
                        .HasConstraintName("FK_PatientProgramme_Programme")
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.ProcedureCode", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.TherapistType", "TherapistTypeNavigation")
                        .WithMany("ProcedureCodes")
                        .HasForeignKey("TherapistType")
                        .HasConstraintName("FK_ICD10Code_TherapistType")
                        .IsRequired();

                    b.Navigation("TherapistTypeNavigation");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.ProfileRole", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Profile", "ProfileNavigation")
                        .WithMany("ProfileRoles")
                        .HasForeignKey("Profile")
                        .HasConstraintName("FK_ProfileRoles_Profile")
                        .IsRequired();

                    b.Navigation("ProfileNavigation");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedMeeting", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.AspNetUser", "CreatedByNavigation")
                        .WithMany("SchedMeetings")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Sched_Meeting_AspNetUsers")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Location", "Location")
                        .WithMany("SchedMeetings")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Sched_Meeting_Location")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedMeetingInvitee", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.SchedMeeting", "Meeting")
                        .WithMany("SchedMeetingInvitees")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_Sched_MeetingInvitees_Sched_Meeting")
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedTherapistAvailabilitySchedule", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.AspNetUser", "CreatedByNavigation")
                        .WithMany("SchedTherapistAvailabilitySchedules")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Sched_TherapistAvailabilitySchedule_AspNetUsers")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Location", "Location")
                        .WithMany("SchedTherapistAvailabilitySchedules")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Sched_TherapistAvailabilitySchedule_Location")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Therapist", "Therapist")
                        .WithMany("SchedTherapistAvailabilitySchedules")
                        .HasForeignKey("TherapistId")
                        .HasConstraintName("FK_Sched_TherapistAvailabilitySchedule_Therapist")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Location");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedTherapistBreak", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.AspNetUser", "CreatedByNavigation")
                        .WithMany("SchedTherapistBreaks")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Sched_TherapistBreaks_AspNetUsers")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Therapist", "Therapist")
                        .WithMany("SchedTherapistBreaks")
                        .HasForeignKey("TherapistId")
                        .HasConstraintName("FK_Sched_TherapistBreaks_Therapist")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedTherapistLunchBreak", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Therapist", "Therapist")
                        .WithMany("SchedTherapistLunchBreaks")
                        .HasForeignKey("TherapistId")
                        .HasConstraintName("FK_Sched_TherapistLunchBreaks_Therapist")
                        .IsRequired();

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedTherapistLunchBreakException", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Therapist", "Therapist")
                        .WithMany("SchedTherapistLunchBreakExceptions")
                        .HasForeignKey("TherapistId")
                        .HasConstraintName("FK_Sched_TherapistLunchBreakExceptions_Sched_TherapistLunchBreakExceptions")
                        .IsRequired();

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Session", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Programme", "Programme")
                        .WithMany()
                        .HasForeignKey("ProgrammeId")
                        .HasConstraintName("FK_Session_Programme")
                        .IsRequired();

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Therapist", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.TherapistType", "TherapistType")
                        .WithMany("Therapists")
                        .HasForeignKey("TherapistTypeId")
                        .HasConstraintName("FK_Therapist_TherapistType")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.AspNetUser", "User")
                        .WithMany("Therapists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Therapist_AspNetUsers");

                    b.Navigation("TherapistType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistAppointment", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Appointment", "Appointment")
                        .WithMany("TherapistAppointments")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_TherapistAppointment_Appointment")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Therapist", "Therapist")
                        .WithMany("TherapistAppointments")
                        .HasForeignKey("TherapistId")
                        .HasConstraintName("FK_TherapistAppointment_Therapist")
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistAppointmentNote", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.TherapistAppointment", "TherapistAppointment")
                        .WithMany("TherapistAppointmentNotes")
                        .HasForeignKey("TherapistAppointmentId")
                        .HasConstraintName("FK_TherapistAppointmentNote_TherapistAppointment")
                        .IsRequired();

                    b.Navigation("TherapistAppointment");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistAppointmentProcedureCode", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.ProcedureCode", "ProcedureCode")
                        .WithMany("TherapistAppointmentProcedureCodes")
                        .HasForeignKey("ProcedureCodeId")
                        .HasConstraintName("FK_TherapistAppointmentICD10Code_ICD10Code")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.TherapistAppointment", "TherapistAppointment")
                        .WithMany("TherapistAppointmentProcedureCodes")
                        .HasForeignKey("TherapistAppointmentId")
                        .HasConstraintName("FK_TherapistAppointmentICD10Code_TherapistAppointment")
                        .IsRequired();

                    b.Navigation("ProcedureCode");

                    b.Navigation("TherapistAppointment");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistLocation", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Location", "Location")
                        .WithMany("TherapistLocations")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_DoctorLocation_Location")
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Therapist", "Therapist")
                        .WithMany("TherapistLocations")
                        .HasForeignKey("TherapistId")
                        .HasConstraintName("FK_DoctorLocation_Doctor")
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APlus.DataAccess.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("APlus.DataAccess.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Appointment", b =>
                {
                    b.Navigation("TherapistAppointments");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("PatientNotes");

                    b.Navigation("Patients");

                    b.Navigation("SchedMeetings");

                    b.Navigation("SchedTherapistAvailabilitySchedules");

                    b.Navigation("SchedTherapistBreaks");

                    b.Navigation("Therapists");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Cycle", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Location", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("LocationProgrammes");

                    b.Navigation("Patients");

                    b.Navigation("SchedMeetings");

                    b.Navigation("SchedTherapistAvailabilitySchedules");

                    b.Navigation("TherapistLocations");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.MedicalAidProvider", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BlockedPatients");

                    b.Navigation("OutgoingMessages");

                    b.Navigation("PatientNotes");

                    b.Navigation("PatientProgrammes");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.ProcedureCode", b =>
                {
                    b.Navigation("TherapistAppointmentProcedureCodes");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Profile", b =>
                {
                    b.Navigation("ProfileRoles");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Programme", b =>
                {
                    b.Navigation("LocationProgrammes");

                    b.Navigation("PatientProgrammes");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.SchedMeeting", b =>
                {
                    b.Navigation("SchedMeetingInvitees");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.Therapist", b =>
                {
                    b.Navigation("SchedTherapistAvailabilitySchedules");

                    b.Navigation("SchedTherapistBreaks");

                    b.Navigation("SchedTherapistLunchBreakExceptions");

                    b.Navigation("SchedTherapistLunchBreaks");

                    b.Navigation("TherapistAppointments");

                    b.Navigation("TherapistLocations");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistAppointment", b =>
                {
                    b.Navigation("TherapistAppointmentNotes");

                    b.Navigation("TherapistAppointmentProcedureCodes");
                });

            modelBuilder.Entity("APlus.DataAccess.Models.TherapistType", b =>
                {
                    b.Navigation("ProcedureCodes");

                    b.Navigation("Therapists");
                });
#pragma warning restore 612, 618
        }
    }
}
